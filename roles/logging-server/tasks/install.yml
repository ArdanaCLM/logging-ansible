#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

# Install Kronos server stack misc.
#------------------------------------------------------------------------------

- name: logging-server | install | include OS specific variables
  include_vars: "{{ ansible_os_family | lower }}.yml"

- name: logging-server | install | Create Kronos user
  become: yes
  user:
    name: "{{ kronos_user }}"
    group: "{{ kronos_group }}"
    shell: /usr/sbin/nologin
    createhome: no
    home: "{{ kronos_home_dir }}"

- name: logging-server | install | Create Kronos user home
  become: yes
  file:
    path: "{{ kronos_home_dir }}"
    state: directory
    owner: "{{ kronos_user }}"
    group: "{{ kronos_group }}"
    mode: 0700

- name: logging-server | install | Install OS specific required packages
  become: yes
  package:
    name: "{{ item }}"
    state: present
  with_items: logging_server_required_packages
  register: ardana_notify_kronos_restart

- name: logging-server | install | Create /opt/kronos directory
  become: yes
  file:
    path: "{{ opt_kronos_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: logging-server | install | Create /var/log/kronos directory
  become: yes
  file:
    path: "{{ var_kronos_dir }}"
    state: directory
    owner: "{{ kronos_user }}"
    group: adm
    mode: 0755

- name: logging-server | install | Install logging server components
  become: yes
  package:
    name: "{{ item }}"
    state: present
  with_items: logging_server_component_packages

# Installing Elasticsearch
#------------------------------------------------------------------------------
- name: logging-server | install | Install Elasticsearch package (SUSE)
  become: yes
  package:
    name: elasticsearch
    state: present
  register: ardana_notify_elasticsearch_install

- name: logging-server | install | Ensure elasticsearch has permissions
  become: yes
  file:
    path: "/var/lib/elasticsearch"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: 0750

- name: logging-server | install | Identify installed kibana package version
  become: yes
  shell: >-
    zypper -n info {{ zypper_kibana_package_name }} |
    sed -n -e 's/^Version.*:\s*\([0-9].[0-9].[0-9]\).*/\1/p'
  register: installed_kibana_version_result
  when: ansible_os_family | lower == 'suse'

- name: logging-server | install | Set installed kibana package version fact
  set_fact:
    kibana_package_version: "{{ installed_kibana_version_result.stdout }}"
  when: ansible_os_family | lower == 'suse'

- name: logging-server | install | Install Elasticsearch util script
  become: yes
  template:
    src: "esutil.py.j2"
    dest: "{{ opt_kronos_dir }}/esutil.py"
    mode: 0644

# Installing Logstash
#------------------------------------------------------------------------------
- name: logging-server | install | Install Logstash rpm package (SUSE)
  become: yes
  package:
    name: logstash
    state: present
  register: ardana_notify_logstash_install

# Installing Kibana
#------------------------------------------------------------------------------
- name: logging-server | install | Install Kibana rpm package (SUSE)
  become: yes
  package:
    name: kibana
    state: present
  register: ardana_notify_kibana_install

- name: logging-server | install | Create /var/log/kibana directory
  become: yes
  file:
    path: "{{ kibana_log_path }}"
    state: directory
    owner: kibana
    group: adm
    mode: 0755


# Reload systemd and enable services
#------------------------------------------------------------------------------
- name: logging-server | install | Reload systemd to pick up new services
  become: yes
  command: systemctl daemon-reload
  when: >-
    ardana_notify_elasticsearch_install is defined and
    ardana_notify_elasticserach_install.changed or
    ardana_notify_logstash_install is defined and
    ardana_notify_logstash_install.changed or
    ardana_notify_kibana_install is defined and
    ardana_notify_kibana_install.changed

- name: logging-server | install | Enable ELK to start on boot
  become: yes
  service:
    name: "{{ item }}"
    enabled: yes
  register: ardana_notify_elasticsearch_restart
  with_items:
    - elasticsearch
    - logstash
    - kibana
